version: '3.4'

networks:
  open-telemetry:

volumes:
  rabbitmq-prometheus_prometheus:
  rabbitmq-prometheus_grafana:

services:
  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    restart: unless-stopped
    ports:
      - 5775:5775/udp
      - 5778:5778
      - 6831:6831/udp
      - 6832:6832/udp
      - 9411:9411
      - 14268:14268
      - 16686:16686
    networks:
      - open-telemetry

  usersDb:
    image: mcmoe/mssqldocker
    container_name: usersDb
    environment:
      - SA_PASSWORD=Password123!
      - ACCEPT_EULA=Y
      - MSSQL_DB=UsersStore
      - MSSQL_USER=sqlserver
      - MSSQL_PASSWORD=Password123!
    ports:
      - "5333:1433"
    networks:
      - open-telemetry
      
  rmq0: &rabbitmq
    image: rabbit-management-decompression
    hostname: rmq0
    container_name: rmq0
    build:
      context: ./rabbitmq
      args:
        - definitions=trd_definitions.json
      dockerfile: Dockerfile
    networks:
        - open-telemetry
    ports:
      - "15672:15672"
      - "5672:5672"
      - "15692:15692"
    environment:
      rabbitmq_erlang_cookie: open-telemetry
    volumes:
      - ./rabbitmq/rabbitmq-overview.conf:/etc/rabbitmq/rabbitmq.conf:ro      
    restart: on-failure
  
  rmq1:
    << : *rabbitmq
    hostname: rmq1
    container_name: rmq1
    ports:
      - "15674:15672"
      - "5674:5672"      
      - "15694:15692"
    depends_on:
      - rmq0      
      
  rmq2:
    << : *rabbitmq
    hostname: rmq2
    container_name: rmq2
    ports:
      - "15675:15672"
      - "5675:5672"      
      - "15695:15692"
    depends_on:
      - rmq1

  redis:
    image: redis:6.2.1
    container_name: redis    
    ports:
      - 6379:6379
    networks:
      - open-telemetry
      
  redisexporter:
    image: oliver006/redis_exporter
    container_name: redisexporter    
    ports:
      - 9121:9121
    networks:
      - open-telemetry
        
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    networks:
      - open-telemetry
    volumes:
      - rabbitmq-prometheus_prometheus:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - open-telemetry
    volumes:
      - rabbitmq-prometheus_grafana:/var/lib/grafana
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/prometheus-dotnet-aspcore.yaml
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yaml
      - ./grafana/dashboards:/dashboards

  userswebapi:
    container_name: userswebapi
    hostname: userswebapi
    image: userswebapi
    build:
      context: .
      dockerfile: src/OpenTelemetry.Demo.Users.WebApi/Dockerfile
    restart: unless-stopped
    ports:
      - "5000:80"
    networks:
      - open-telemetry
    depends_on:
      - jaeger
      - usersDb
      - legislationswebapi
      - prometheus
    environment:
      JaegerExporter__AgentHost: jaeger
      JaegerExporter__AgentPort: 6831
      LegislationsClient__Endpoint: http://legislationswebapi:80
      Datasource__ConnectionString: Server=usersDb;Database=UsersStore;Integrated Security=False;User ID=sqlserver;Password=Password123!;Application Name=UsersService;ConnectRetryCount=5;ConnectRetryInterval=5;
      
  legislationswebapi:
    container_name: legislationswebapi
    hostname: legislationswebapi
    image: legislationswebapi
    build:
      context: .
      dockerfile: src/OpenTelemetry.Demo.Legislations.WebApi/Dockerfile
    restart: unless-stopped
    ports:
      - "6000:80"
    networks:
      - open-telemetry
    depends_on:
      - jaeger
      - redis
    environment:
      JaegerExporter__AgentHost: jaeger
      JaegerExporter__AgentPort: 6831
      Redis__Host: redis
      Redis__Port: 6379
      RabbitMessageBus__Hosts: rmq0:5672,rmq1:5674,rmq2:5675
      RabbitMessageBus__VirtualHost: sbtrd
      RabbitMessageBus__Username: sbdev
      RabbitMessageBus__Password: sbdev
